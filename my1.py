# -*- coding: utf-8 -*-
import asyncio
import sys
import io
from telethon.sync import TelegramClient
from telethon.errors import FloodWaitError, ChannelPrivateError
import pandas as pd
import logging
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_parser.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

async def parse_telegram_group():
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    config = {
        'api_id': 27153551,
        'api_hash': '1b1c64f8c43da280b76d1a6ae677b92a',
        'phone': '+380968884880',
        'group_link': 'https://t.me/+CRwVsJyA5BwzMTcy'
    }

    client = TelegramClient(
        'tg_session',
        config['api_id'],
        config['api_hash'],
        system_version="4.16.30-vxCUSTOM"
    )

    try:
        logging.info("üîê –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram...")
        await client.start(config['phone'])

        logging.info("üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥—Ä—É–ø—É...")
        try:
            group = await client.get_entity(config['group_link'])
            logging.info(f"üìå –ì—Ä—É–ø–∞: {group.title} (ID: {group.id})")
        except ValueError as e:
            logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≥—Ä—É–ø—É: {str(e)}")
            return
        except ChannelPrivateError:
            logging.error("‚ùå –ì—Ä—É–ø–∞ —î –ø—Ä–∏–≤–∞—Ç–Ω–æ—é –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return

        logging.info("‚è≥ –ü–æ—á–∞—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É —É—á–∞—Å–Ω–∏–∫—ñ–≤...")
        participants = []

        try:
            async for user in client.iter_participants(group, aggressive=True):
                try:
                    user_info = {
                        '–ì—Ä—É–ø–∞': group.title,
                        'ID': user.id,
                        '–Ü–º\'—è': user.first_name or '',
                        '–ü—Ä—ñ–∑–≤–∏—â–µ': user.last_name or '',
                        '–Æ–∑–µ—Ä–Ω–µ–π–º': f"@{user.username}" if user.username else '',
                        '–¢–µ–ª–µ—Ñ–æ–Ω': user.phone or '',
                        '–ë–æ—Ç': '–¢–∞–∫' if user.bot else '–ù—ñ',
                        '–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥—É': datetime.now().strftime('%Y-%m-%d %H:%M')
                    }
                    participants.append(user_info)

                    if len(participants) % 10 == 0:
                        logging.info(f"üë• –û–±—Ä–æ–±–ª–µ–Ω–æ {len(participants)} —É—á–∞—Å–Ω–∏–∫—ñ–≤...")

                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")
                    continue

        except FloodWaitError as e:
            logging.warning(f"‚è≥ Telegram –æ–±–º–µ–∂–µ–Ω–Ω—è. –ß–µ–∫–∞—î–º–æ {e.seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.seconds)
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {str(e)}")

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if participants:
            filename = f"–£—á–∞—Å–Ω–∏–∫–∏_{group.title}_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"

            try:
                # –ü–†–ê–í–ò–õ–¨–ù–ò–ô —Å–ø–æ—Å—ñ–± –∑–∞–ø–∏—Å—É Excel
                with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                    pd.DataFrame(participants).to_excel(writer, index=False)

                logging.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ {len(participants)} —É—á–∞—Å–Ω–∏–∫—ñ–≤ —É —Ñ–∞–π–ª—ñ {filename}")

            except Exception as e:
                logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {str(e)}")

                # –°–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —É CSV —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
                try:
                    csv_filename = filename.replace('.xlsx', '.csv')
                    pd.DataFrame(participants).to_csv(csv_filename, index=False, encoding='utf-8-sig')
                    logging.info(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é —É {csv_filename}")
                except Exception as e:
                    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó: {str(e)}")
        else:
            logging.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")

    except Exception as e:
        logging.critical(f"‚ÄºÔ∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
    finally:
        await client.disconnect()
        logging.info("üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ Telegram")

if __name__ == '__main__':
    if sys.platform == 'win32':
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

    asyncio.run(parse_telegram_group())